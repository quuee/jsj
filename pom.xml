<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.ccx.jsj</groupId>
    <artifactId>ccx-jsj</artifactId>
    <packaging>pom</packaging>
    <version>1.0-SNAPSHOT</version>

    <description>脚手架</description>

    <modules>
        <module>jsj-common</module>
        <module>jsj-mngt</module>
    </modules>

    <!-- 定义变量 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <java.version>1.8</java.version>

        <!-- springCloud版本 -->
        <spring.cloud.version>Hoxton SR3</spring.cloud.version>
        <!-- springBoot版本 -->
        <spring-boot.version>2.2.5.RELEASE</spring-boot.version>

        <!-- txlcn 分布式事务管理器 -->
        <codingapi.txlcn.version>5.0.2.RELEASE</codingapi.txlcn.version>
        <!-- seata 分布式事务管理器 -->

        <!-- 基于redis分布式锁框架 -->
        <redisson.version>3.11.2</redisson.version>
        <!-- mybatis -->
        <mybatis.version>2.1.0</mybatis.version>
        <!-- mybatis-plus -->
        <mybatis-plus.version>3.3.0</mybatis-plus.version>
        <!-- 分页插件 -->
<!--        <pagehelper.version>1.2.12</pagehelper.version>-->
        <!-- fastjson -->
        <fastjson.version>1.2.62</fastjson.version>
        <!-- hutool -->
        <hutool.version>5.1.1</hutool.version>
        <!-- easyexcel -->
        <easyexcel.version>2.1.4</easyexcel.version>

    </properties>

    <dependencies>

        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.10</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>

    <!-- 统一模块的依赖版本 -->
    <dependencyManagement>

        <dependencies>
            <!--  -->
            <dependency>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-dependencies</artifactId>
                <version>${spring-boot.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <dependency>
                <groupId>org.springframework.cloud</groupId>
                <artifactId>spring-cloud-dependencies</artifactId>
                <version>${spring.cloud.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>

            <!-- seata 分布式事务管理器 -->

            <!-- hutool -->
            <dependency>
                <groupId>cn.hutool</groupId>
                <artifactId>hutool-all</artifactId>
                <version>${hutool.version}</version>
            </dependency>

            <!-- redis 分布式锁框架 -->
            <dependency>
                <groupId>org.redisson</groupId>
                <artifactId>redisson</artifactId>
                <version>${redisson.version}</version>
            </dependency>

            <!-- mybatis mybatis-plus 两个最好不要一起 -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>${mybatis-plus.version}</version>
            </dependency>

            <!-- mybatis -->
            <!--<dependency>-->
                <!--<groupId>org.mybatis.spring.boot</groupId>-->
                <!--<artifactId>mybatis-spring-boot-starter</artifactId>-->
                <!--<version>${mybatis.version}</version>-->
            <!--</dependency>-->

            <!--<dependency>-->
                <!--<groupId>com.github.pagehelper</groupId>-->
                <!--<artifactId>pagehelper-spring-boot-starter</artifactId>-->
                <!--<version>${pagehelper.version}</version>-->
            <!--</dependency>-->

            <!-- fastjson -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>fastjson</artifactId>
                <version>${fastjson.version}</version>
            </dependency>

            <!-- alibaba easyexcel -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>easyexcel</artifactId>
                <version>${easyexcel.version}</version>
            </dependency>

        </dependencies>

    </dependencyManagement>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>3.6.0</version>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <version>3.1.0</version>
                <configuration>
                    <archive>
                        <!-- 生成的jar中，包含pom.xml和pom.properties这两个文件 -->
                        <addMavenDescriptor>true</addMavenDescriptor>
                        <!-- 生成MANIFEST.MF的设置 -->
                        <manifest>
                            <!--这个属性特别关键，如果没有这个属性，有时候我们引用的包maven库
                            下面可能会有多个包，并且只有一个是正确的，其余的可能是带时间戳的，
                            此时会在classpath下面把那个带时间戳的给添加上去，然后我们
                            在依赖打包的时候，打的是正确的，所以两头会对不上，报错。-->
                            <useUniqueVersions>false</useUniqueVersions>
                            <!-- 为依赖包添加路径, 这些路径会写在MANIFEST文件的Class-Path下 -->
                            <addClasspath>true</addClasspath>
                            <!-- 这个jar所依赖的jar包添加classPath的时候的前缀，如果这个
                            jar本身和依赖包在同一级目录，则不需要添加-->
                            <classpathPrefix>lib/</classpathPrefix>
                            <!-- jar启动入口类-->
                            <mainClass>com.ccx.jsj.JsjApplication</mainClass>
                        </manifest>
                        <!--<manifestEntries>-->
                        <!-- 在Class-Path下添加配置文件的路径 -->
                        <!--<Class-Path>../config/</Class-Path>-->
                        <!-- 假如这个项目可能要引入一些外部资源，但是你打包的时候并不想把
                        这些资源文件打进包里面，这个时候你必须在这边额外指定一些这些资源
                        文件的路径，这个位置指定的话，要根据你预期的这些位置去设置，我这边
                        所有jar都在lib下，资源文件都在config下，lib和config是同级的 -->
                        <!-- 同时还需要注意另外一个问题，假如你的pom文件里面配置了
                        <scope>system</scope>,就是你依赖是你本地的资源，这个时候使用
                        这个插件，classPath里面是不会添加，所以你得手动把这个依赖添加进
                        这个地方，用空格隔开就行-->
                        <!--</manifestEntries>-->
                    </archive>
                    <!-- jar包的位置-->
                    <!--<outputDirectory>${project.build.directory}/lib</outputDirectory>-->
                    <!--<includes>-->
                    <!-- 打jar包时，只打包class文件 -->
                    <!-- 有时候可能需要一些其他文件，这边可以配置，包括剔除的文件等等-->
                    <!--<include>**/*.class</include>-->
                    <!--</includes>-->
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>2.1.9.RELEASE</version>
                <configuration>
                    <!-- 指定该Main Class为全局的唯一入口 -->
                    <mainClass>com.ccx.jsj.JsjApplication</mainClass>
                    <!-- 如果不设置fork,那么不会restart,devtools热部署不会起作用-->
                    <fork>true</fork>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中-->
                        </goals>
                    </execution>
                </executions>
            </plugin>

        </plugins>
    </build>


<!--    <repositories>-->
<!--        &lt;!&ndash;阿里云主仓库，代理了maven central和jcenter仓库&ndash;&gt;-->
<!--        <repository>-->
<!--            <id>aliyun</id>-->
<!--            <name>aliyun</name>-->
<!--            <url>https://maven.aliyun.com/repository/public</url>-->
<!--            <releases>-->
<!--                <enabled>true</enabled>-->
<!--            </releases>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </repository>-->
<!--        &lt;!&ndash;阿里云代理Spring 官方仓库&ndash;&gt;-->
<!--        <repository>-->
<!--            <id>spring-milestones</id>-->
<!--            <name>Spring Milestones</name>-->
<!--            <url>https://maven.aliyun.com/repository/spring</url>-->
<!--            <releases>-->
<!--                <enabled>true</enabled>-->
<!--            </releases>-->
<!--            <snapshots>-->
<!--                <enabled>false</enabled>-->
<!--            </snapshots>-->
<!--        </repository>-->
<!--    </repositories>-->

</project>